{#
/**
* @file
* Default theme implementation to display a paragraph.
*
* Available variables:
* - paragraph: Full paragraph entity.
* Only method names starting with "get", "has", or "is" and a few common
* methods such as "id", "label", and "bundle" are available. For example:
* - paragraph.getCreatedTime() will return the paragraph creation timestamp.
* - paragraph.id(): The paragraph ID.
* - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
* - paragraph.getOwnerId(): The user ID of the paragraph author.
* See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
* and methods for the paragraph object.
* - content: All paragraph items. Use {{ content }} to print them all,
* or print a subset such as {{ content.field_example }}. Use
* {{ content|without('field_example') }} to temporarily suppress the printing
* of a given child element.
* - attributes: HTML attributes for the containing element.
* The attributes.class element may contain one or more of the following
* classes:
* - paragraphs: The current template type (also known as a "theming hook").
* - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
* "Image" it would result in "paragraphs--type--image". Note that the machine
* name will often be in a short form of the human readable label.
* - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
* preview would result in: "paragraphs--view-mode--preview", and
* default: "paragraphs--view-mode--default".
* - view_mode: View mode; for example, "preview" or "full".
* - logged_in: Flag for authenticated user status. Will be true when the
* current user is a logged-in member.
* - is_admin: Flag for admin user status. Will be true when the current user
* is an administrator.
*
* @see template_preprocess_paragraph()
*
* @ingroup themeable
*/
#}

{%
set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
not paragraph.isPublished() ? 'paragraph--unpublished'
]
%}
{% set option            = content.field_option[0]["#markup"]                      %}
{% set image             = content.field_image                                     %}
{% set body              = content.field_single_column_body.0["#text"]             %}
{% set color_background  = content.field_background_color_[0]["#context"]["value"] %}
{% set color_foreground  = content.field_foregorund_color_[0]["#context"]["value"] %}
{% set image_height      = content.field_image_height[0]["#markup"]                %}
{% set image_url         = image.0["#item"].parent.0.entity.uri.0.url              %}

{% if option == "Image above text (no overlay)"  %}
    <div {{ attributes.addClass(classes).addClass("image-above-text").addClass("paragraph-single-column-layout-container").addClass("card") }}  style="height:{{image_height}}px;">
        <div class="image">{{image}}   </div>
        <div class="text" style="background: {{color_background}}; color: {{color_foreground}}" >{{body|raw}}</div>
    </div>
{% elseif option == "Image under text (overlay, no parallax)" %}
    <div {{ attributes.addClass(classes).addClass("card").addClass("image-under-text").addClass("paragraph-single-column-layout-container")}} style="height:{{image_height}}px;">
        {{image}}
        <div class="card-img-overlay" style="color: {{color_foreground}}">
            {{body|raw}}
        </div>
    </div>
{% elseif option == "Color under text (overlay)" %}
    {% if color_background == null and color_foreground == null  %}
        <div {{ attributes.addClass(classes).addClass("card").addClass("color-under-text").addClass("paragraph-single-column-layout-container") }}  style="height:{{image_height}}px;">
            {{body|raw}}
        </div>
    {% else %}
        <div class="color-under-text" style="background: {{color_background}}; color: {{color_foreground}}">
            {{body|raw}}
        </div>
    {% endif %}
{% elseif option == "Image under text (overlay, parallax)" %}
    <div {{ attributes.addClass(classes).addClass("card").addClass("image-under-text").addClass("paragraph-single-column-layout-container").addClass("paragraph-single-column-parallax")}} style="height:{{image_height}}px; background: url({{image_url}});">
        <div class="card-img-overlay" style="color: {{color_foreground}};">
            {{body|raw}}
        </div>
    </div>
{% endif %}
